unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4/bin:/nix/store/vwkvhj69z4qqgmpa2lwm97kabf12p26r-coreutils-9.3/bin:/nix/store/qyzfglbrqb5ck0dgljplin2bvc4995w7-findutils-4.9.0/bin:/nix/store/x6y2i213maj6ibcn0qzgg7graif5qcvi-diffutils-3.10/bin:/nix/store/g5p3ky90xa05ggg5szyb0pbbl2vp7n03-gnused-4.9/bin:/nix/store/p2r51wfg9m3ga7pp7avslpfhfa7w5y83-gnugrep-3.11/bin:/nix/store/cmn958i8qym0qvmvydl23fh3bm3fbhl7-gawk-5.2.2/bin:/nix/store/f5qy259g9b4qh0hwz22z5j5bq3m53cpv-gnutar-1.35/bin:/nix/store/kmr52zpw7wazxywqvzgpdx0vnn9prd3v-gzip-1.13/bin:/nix/store/w1mar48lwkavwy64mvj567lwaqnm2l11-bzip2-1.0.8-bin/bin:/nix/store/9dh2csn531by6b1vr9jv85v4k17xwkid-gnumake-4.4.1/bin:/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin:/nix/store/pinwlz7294p37d2sbkdpjildzxii42vv-patch-2.7.6/bin:/nix/store/skrzk0g88jf9rg28labqsyxv7gg357q1-xz-5.4.4-bin/bin:/nix/store/h5pshzq92r2xcv6w1p10cmkar4nyv0xp-file-5.45/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LANG='en_US.UTF-8'
export LANG
LD='ld'
export LD
LINENO='76'
LOCALE_ARCHIVE='/nix/store/sp2vy14jmwviisq07ysx0935msl2cz90-glibc-locales-2.38-23/lib/locale/locale-archive'
export LOCALE_ARCHIVE
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/h8d2j0prdf7pnpgyrgkxrrbfwnmxbq6y-binutils-wrapper-2.40'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='12'
export NIX_BUILD_CORES
NIX_CC='/nix/store/zlzz2z48s7ry0hkl55xiqp5a73b4mzrg-gcc-wrapper-12.3.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=hq0j1x6a58'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='fortify fortify3 stackprotector pic strictoverflow format relro bindnow'
export NIX_HARDENING_ENABLE
NIX_LDFLAGS='-rpath /home/sspeaks/wsl_projects/haskell_codespace/outputs/out/lib  -L/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4/lib -L/nix/store/y27p4hb1b19adypnygwl01ns4pxrhy5j-libffi-3.4.4/lib -L/nix/store/bsb4z6yw6v3kz7vmf1m4gh4flf9kj1ck-gmp-with-cxx-6.3.0/lib -L/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4/lib -L/nix/store/y27p4hb1b19adypnygwl01ns4pxrhy5j-libffi-3.4.4/lib -L/nix/store/bsb4z6yw6v3kz7vmf1m4gh4flf9kj1ck-gmp-with-cxx-6.3.0/lib'
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7/bin:/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4/bin:/nix/store/51m56xdf1p2n8frkabhnl3123has8bzk-remove-references-to/bin:/nix/store/hq70br697chxyr6v63j9k6lf7ngnzgy5-cabal-install-3.10.1.0/bin:/nix/store/4m86y48628llvljrr0bzz000dkkqzwhq-haskell-language-server-2.4.0.0/bin:/nix/store/khaca0lj1r4j5c40jjq25wzvr7ld4vxm-aeson-pretty-0.8.9/bin:/nix/store/g7g0yw36k73qgf3bnrbx3f22sl6p9j60-ghcide-2.4.0.0/bin:/nix/store/w89jgplarj1cp88vifnaijv46lq3001a-constraints-extras-0.4.0.0/bin:/nix/store/zj3xhqvydcq86lx80pvk4qlzi1hsjxlw-hie-bios-0.12.0/bin:/nix/store/05bk7rs6gp4yk2g1zy4f4pa32nvv6a7h-hiedb-0.4.3.0/bin:/nix/store/6alyjxj2ip9nn0v8q7iqkr7rb2xancxh-lsp-types-2.0.2.0/bin:/nix/store/rz2czkn9k3ka0saghxkc95vvwwafd4y8-implicit-hie-0.1.2.7/bin:/nix/store/vjyp0l71prh9ps4fl26xcd7n3y5nc3db-pretty-simple-4.1.2.0/bin:/nix/store/zxah2rghfz3r170ydsqc7zpmn7fixi29-floskell-0.10.8/bin:/nix/store/7j6j38072fvgs2g4gqc4jlv94ps0v0k8-fourmolu-0.14.0.0/bin:/nix/store/cxl5ys0w3733mpnim74lja54lms9309q-retrie-1.2.2/bin:/nix/store/mlq6cwsc8wfkb3igcsyy1m5bviv7wl3i-apply-refact-0.13.0.0/bin:/nix/store/r8yzijs1qmw4wrixqcvvjfjcywr7isn9-hlint-3.6.1/bin:/nix/store/5bgmxd62a7sr8bcp0b677ph6gdxaq1d4-cpphs-1.20.9.1/bin:/nix/store/i378r651pnbhdssh9wncc78wzc02pfkc-hscolour-1.24.4/bin:/nix/store/r5996735hj8r46dnpykrsjgk24ls51vb-ormolu-0.7.2.0-bin/bin:/nix/store/wywgd3wp46ih363zmyamf9k5bcj0rr20-stylish-haskell-0.14.5.0/bin:/nix/store/znqwpxy9jlxcgi2ms2hga0ch87bbbr9g-patchelf-0.15.0/bin:/nix/store/zlzz2z48s7ry0hkl55xiqp5a73b4mzrg-gcc-wrapper-12.3.0/bin:/nix/store/0b9bsznqs6pdg42dxcwvrlmarjn2p6a1-gcc-12.3.0/bin:/nix/store/nvh3jgs8pqghnsfzbv28004xkigiw8gc-glibc-2.38-23-bin/bin:/nix/store/vwkvhj69z4qqgmpa2lwm97kabf12p26r-coreutils-9.3/bin:/nix/store/h8d2j0prdf7pnpgyrgkxrrbfwnmxbq6y-binutils-wrapper-2.40/bin:/nix/store/p58l5qmzifl20qmjs3xfpl01f0mqlza2-binutils-2.40/bin:/nix/store/vwkvhj69z4qqgmpa2lwm97kabf12p26r-coreutils-9.3/bin:/nix/store/qyzfglbrqb5ck0dgljplin2bvc4995w7-findutils-4.9.0/bin:/nix/store/x6y2i213maj6ibcn0qzgg7graif5qcvi-diffutils-3.10/bin:/nix/store/g5p3ky90xa05ggg5szyb0pbbl2vp7n03-gnused-4.9/bin:/nix/store/p2r51wfg9m3ga7pp7avslpfhfa7w5y83-gnugrep-3.11/bin:/nix/store/cmn958i8qym0qvmvydl23fh3bm3fbhl7-gawk-5.2.2/bin:/nix/store/f5qy259g9b4qh0hwz22z5j5bq3m53cpv-gnutar-1.35/bin:/nix/store/kmr52zpw7wazxywqvzgpdx0vnn9prd3v-gzip-1.13/bin:/nix/store/w1mar48lwkavwy64mvj567lwaqnm2l11-bzip2-1.0.8-bin/bin:/nix/store/9dh2csn531by6b1vr9jv85v4k17xwkid-gnumake-4.4.1/bin:/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin:/nix/store/pinwlz7294p37d2sbkdpjildzxii42vv-patch-2.7.6/bin:/nix/store/skrzk0g88jf9rg28labqsyxv7gg357q1-xz-5.4.4-bin/bin:/nix/store/h5pshzq92r2xcv6w1p10cmkar4nyv0xp-file-5.45/bin'
export PATH
PS4='+ '
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7/share:/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4/share:/nix/store/hq70br697chxyr6v63j9k6lf7ngnzgy5-cabal-install-3.10.1.0/share:/nix/store/xxwzq2c8bzvjhqc70fsi75mqfxa6nv0p-attoparsec-0.14.4/share:/nix/store/c9zrd47i8fx51zvvjj09kxjbflgx1j1k-ghc-check-0.5.0.8/share:/nix/store/6alyjxj2ip9nn0v8q7iqkr7rb2xancxh-lsp-types-2.0.2.0/share:/nix/store/fkrpljb7fx9fam1s824g078psnkbzc2a-fail-4.9.0.0/share:/nix/store/r5996735hj8r46dnpykrsjgk24ls51vb-ormolu-0.7.2.0-bin/share:/nix/store/znqwpxy9jlxcgi2ms2hga0ch87bbbr9g-patchelf-0.15.0/share'
export XDG_DATA_DIRS
__structuredAttrs=''
export __structuredAttrs
buildInputs=''
export buildInputs
buildPhase='runHook preBuild
./Setup build 
runHook postBuild
'
export buildPhase
builder='/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin/bash'
export builder
checkPhase='runHook preCheck
checkFlagsArray+=(
  "--show-details=streaming"
  
)
./Setup test  $checkFlags ${checkFlagsArray:+"${checkFlagsArray[@]}"}
runHook postCheck
'
export checkPhase
cmakeFlags=''
export cmakeFlags
compileBuildDriverPhase='runHook preCompileBuildDriver

for i in Setup.hs Setup.lhs /nix/store/4mdp8nhyfddh7bllbi7xszz7k9955n79-Setup.hs; do
  test -f $i && break
done

echo setupCompileFlags: $setupCompileFlags
ghc $setupCompileFlags --make -o Setup -odir $builddir -hidir $builddir $i

runHook postCompileBuildDriver
'
export compileBuildDriverPhase
configureFlags=''
export configureFlags
configurePhase='runHook preConfigure

unset GHC_PACKAGE_PATH      # Cabal complains if this variable is set during configure.

echo configureFlags: $configureFlags
./Setup configure $configureFlags 2>&1 | /nix/store/vwkvhj69z4qqgmpa2lwm97kabf12p26r-coreutils-9.3/bin/tee "$NIX_BUILD_TOP/cabal-configure.log"
if /nix/store/p2r51wfg9m3ga7pp7avslpfhfa7w5y83-gnugrep-3.11/bin/egrep -q -z '\''Warning:.*depends on multiple versions'\'' "$NIX_BUILD_TOP/cabal-configure.log"; then
  echo >&2 "*** abort because of serious configure-time warning from Cabal"
  exit 1
fi

export GHC_PACKAGE_PATH="$packageConfDir:"

runHook postConfigure
'
export configurePhase
configurePlatforms=''
export configurePlatforms
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/znqwpxy9jlxcgi2ms2hga0ch87bbbr9g-patchelf-0.15.0 /nix/store/6g3mnziija245czxdqvs4k4sc6lad0sw-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/wzdsbnv2ba3nj91aql8jjdddfmkkdh7h-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh /nix/store/wmknncrif06fqxa16hpdldhixk95nds0-strip.sh /nix/store/zlzz2z48s7ry0hkl55xiqp5a73b4mzrg-gcc-wrapper-12.3.0'
depsBuildBuild='/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7'
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck='1'
export doCheck
doInstallCheck=''
export doInstallCheck
doc='/home/sspeaks/wsl_projects/haskell_codespace/outputs/doc'
export doc
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
haddockPhase='runHook preHaddock

runHook postHaddock
'
export haddockPhase
hardeningDisable='pie'
export hardeningDisable
initialPath='/nix/store/vwkvhj69z4qqgmpa2lwm97kabf12p26r-coreutils-9.3 /nix/store/qyzfglbrqb5ck0dgljplin2bvc4995w7-findutils-4.9.0 /nix/store/x6y2i213maj6ibcn0qzgg7graif5qcvi-diffutils-3.10 /nix/store/g5p3ky90xa05ggg5szyb0pbbl2vp7n03-gnused-4.9 /nix/store/p2r51wfg9m3ga7pp7avslpfhfa7w5y83-gnugrep-3.11 /nix/store/cmn958i8qym0qvmvydl23fh3bm3fbhl7-gawk-5.2.2 /nix/store/f5qy259g9b4qh0hwz22z5j5bq3m53cpv-gnutar-1.35 /nix/store/kmr52zpw7wazxywqvzgpdx0vnn9prd3v-gzip-1.13 /nix/store/w1mar48lwkavwy64mvj567lwaqnm2l11-bzip2-1.0.8-bin /nix/store/9dh2csn531by6b1vr9jv85v4k17xwkid-gnumake-4.4.1 /nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15 /nix/store/pinwlz7294p37d2sbkdpjildzxii42vv-patch-2.7.6 /nix/store/skrzk0g88jf9rg28labqsyxv7gg357q1-xz-5.4.4-bin /nix/store/h5pshzq92r2xcv6w1p10cmkar4nyv0xp-file-5.45'
installPhase='runHook preInstall

./Setup install




for x in $doc/share/doc/haskell-codespace-0.1.0.0"/html/src/"*.html; do
  remove-references-to -t $out $x
done
mkdir -p $doc



runHook postInstall
'
export installPhase
mesonFlags=''
export mesonFlags
name='haskell-codespace-0.1.0.0-env'
export name
nativeBuildInputs='/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7 /nix/store/51m56xdf1p2n8frkabhnl3123has8bzk-remove-references-to /nix/store/hq70br697chxyr6v63j9k6lf7ngnzgy5-cabal-install-3.10.1.0 /nix/store/4m86y48628llvljrr0bzz000dkkqzwhq-haskell-language-server-2.4.0.0 /nix/store/wywgd3wp46ih363zmyamf9k5bcj0rr20-stylish-haskell-0.14.5.0 /nix/store/rz2czkn9k3ka0saghxkc95vvwwafd4y8-implicit-hie-0.1.2.7'
export nativeBuildInputs
out='/home/sspeaks/wsl_projects/haskell_codespace/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='doc'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out doc'
export outputs
patches=''
export patches
pkg='/nix/store/zlzz2z48s7ry0hkl55xiqp5a73b4mzrg-gcc-wrapper-12.3.0'
declare -a pkgsBuildBuild=('/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7' '/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4' '/nix/store/y27p4hb1b19adypnygwl01ns4pxrhy5j-libffi-3.4.4' '/nix/store/bsb4z6yw6v3kz7vmf1m4gh4flf9kj1ck-gmp-with-cxx-6.3.0' )
declare -a pkgsBuildHost=('/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7' '/nix/store/51m56xdf1p2n8frkabhnl3123has8bzk-remove-references-to' '/nix/store/hq70br697chxyr6v63j9k6lf7ngnzgy5-cabal-install-3.10.1.0' '/nix/store/s8vzplhy0ak4glx9wm77z588kf27yk8g-async-2.2.4' '/nix/store/z52xn5qgg1h43sjznfcrgmkbnaw24dcy-hashable-1.4.3.0' '/nix/store/9c7nfygni3f1c70xm3dj0vz2zzfp2d06-base16-bytestring-1.0.2.0' '/nix/store/1rvar62jq9b10x1ndm9n0rdgjrnw9v2h-Cabal-3.10.2.0' '/nix/store/j6q7kd7a1hgw90vfqyjp79jhjg3x839c-Cabal-syntax-3.10.2.0' '/nix/store/1zlmv2iwbam7n7bg6vpsshb0qqxkw6ml-cabal-install-solver-3.10.1.0' '/nix/store/lyavndzd84s4hxhg0lhrrgi82y1kh6nf-edit-distance-0.2.2.1' '/nix/store/srvpvxyhm4mmakx22yy99n5jgckjmvn4-random-1.2.1.1' '/nix/store/wapppfyrig30yrix9nns3far485b13av-splitmix-0.1.0.5' '/nix/store/s6avwb3gxfgc8azrh9a57mv8mjbkbzql-cryptohash-sha256-0.11.102.1' '/nix/store/q26xmklyycvk9wcxjcai0j7cb4hrr1lx-echo-0.1.4' '/nix/store/m2w0jrm7jma3pv195q2vm1j8f0hihmhg-hackage-security-0.6.2.3' '/nix/store/xw5p5l1gyn7zp15dzfv5lwwhg8a0db12-base64-bytestring-1.2.1.0' '/nix/store/4swv8dn8j3r5aygnq9cr6b4l75lnpyss-ed25519-0.0.5.0' '/nix/store/716p1d5kkz0pk4l1v0m59dxddg8lafwg-lukko-0.1.1.3' '/nix/store/fib6fqaxzi1i59bvnc2nk4qmq7lpa97d-network-3.1.4.0' '/nix/store/hg5warsrs29mk36y3vv8gyxnzc4cgq08-network-uri-2.6.4.2' '/nix/store/1ibi6xnp0zz6i213r1lgn41890rbcx2d-th-compat-0.1.4' '/nix/store/i0830dkl3l89ys17k824piz9n2qgsc3x-tar-0.5.1.1' '/nix/store/5j4g3b9cwn5i9iag1qg4ywfzprqarnpc-zlib-0.6.3.0' '/nix/store/l0blsnysqs0vvz5k2yhyxvfqrfl50z4x-HTTP-4000.4.1' '/nix/store/r4hm3zy9gi1mz79b43h5im5vzwd3jnri-regex-base-0.94.0.2' '/nix/store/5mp0axv9bmvckh2rvr9688pvjwmlmc37-regex-posix-0.96.0.1' '/nix/store/z6cfn5iyg1rim2lj8cnna4igml7qykm8-resolv-0.1.2.0' '/nix/store/yqpk81y605yyypl3grawgjzr2qizkb2g-safe-exceptions-0.1.7.4' '/nix/store/4m86y48628llvljrr0bzz000dkkqzwhq-haskell-language-server-2.4.0.0' '/nix/store/khaca0lj1r4j5c40jjq25wzvr7ld4vxm-aeson-pretty-0.8.9' '/nix/store/383qb3zh44hf0bc92xi8z22h9cy577br-aeson-2.1.2.1' '/nix/store/xxwzq2c8bzvjhqc70fsi75mqfxa6nv0p-attoparsec-0.14.4' '/nix/store/8p1n70nxlasvih2yrwnsxg4ilfpzkn9w-scientific-0.3.7.0' '/nix/store/5kcr0gx0xrkk0l69fx756d0rvs21g1h1-integer-logarithms-1.0.3.1' '/nix/store/0zidw7qpgs15bpipshrji8znbv36iapb-primitive-0.8.0.0' '/nix/store/5kzjfzrbsddqqc2wfv4fgrab1ww6l56l-base-compat-batteries-0.12.3' '/nix/store/6mhx3p7y22pds0r9jicq46dk27axn3zn-base-compat-0.12.3' '/nix/store/xbafv7bh25jd11nwrh1bn88mn2hrq8cs-data-fix-0.3.2' '/nix/store/6fv04yvrqxcalvp3rn6g8g885k39dvlv-dlist-1.0' '/nix/store/j8aka4lih1zraa2nm57nbrx77vy7p507-generically-0.1.1' '/nix/store/bikb2fljyz4fza1rfdhqcz54b0jldvj8-base-orphans-0.9.1' '/nix/store/97i3awaz3vxly1ilislcidynj2l69v4l-indexed-traversable-0.1.3' '/nix/store/kkkdjf7w11vwpi43qlqvhbfxnf51nysw-foldable1-classes-compat-0.1' '/nix/store/agv4ibmd71004wlbdnp6g51a4gbk3drd-tagged-0.8.7' '/nix/store/mhbkfzyngfidl0c1p2wcvanfp61bx3h7-OneTuple-0.4.1.1' '/nix/store/vdi36fkxnr3f48kxdpml8kli6nqb6iwp-QuickCheck-2.14.3' '/nix/store/2yj1g6gn63dv985waiknxps508jak133-semialign-1.3' '/nix/store/licsvrj3fkl58lnpl3q7ikxwsngj3d20-indexed-traversable-instances-0.1.1.2' '/nix/store/95d8pr2k39gfwh639giyj844imgxd7rv-unordered-containers-0.2.19.1' '/nix/store/dl5kpf1q0075djf464pkpj2a1qgvm6k6-vector-0.13.1.0' '/nix/store/kn37p21rvq29mbx8rxvb3sqqfn9ymv65-vector-stream-0.1.0.0' '/nix/store/6gb1dc0sl2y08winz5hwwby9qi8qjbcp-semigroupoids-5.3.7' '/nix/store/kf7mxhsq10svh986y6kvdblsl0s5pr3s-bifunctors-5.5.15' '/nix/store/hsrixl836q1md5g5c5k743pkyfmi64rp-comonad-5.0.8' '/nix/store/sl1lf1lik1ha99xklrvhvh8j3pibzj9q-distributive-0.6.2.1' '/nix/store/z9zkcnd706aw39s2w04ic6bcz804vvly-transformers-compat-0.7.2' '/nix/store/m6dhdck9afm9cfw7msxky0yl9d44vqmj-th-abstraction-0.4.5.0' '/nix/store/yzmxzrfbkw7d8li6m9cnaqbpaw1yamr6-contravariant-1.5.5' '/nix/store/x01zvp5bq3b05g0qnq21h61a4pplbzz9-StateVar-1.2.2' '/nix/store/fx5q6jy5n1q82sx8r0n43aq4nasgzh6r-these-1.2' '/nix/store/cllminm9425igm3hp9zk36a0jwlsda0g-assoc-1.1' '/nix/store/j37nkc49wpmx038dbwj1vsmyv1jgvf6v-strict-0.5' '/nix/store/8mwwrd62z3bfpd58pl0ck3qypf48wrhc-text-short-0.1.5' '/nix/store/qvlg58cdvsqp9bl0xmwg0m0x9qj4rycl-time-compat-1.9.6.1' '/nix/store/cz6pga6308a0vrgvd8p4zbc1xrdpqgy5-uuid-types-1.0.5.1' '/nix/store/gg9qa7cv57vmsygjgmym7la6n51w6ayj-witherable-0.4.2' '/nix/store/jwaj0cjbciv46v1fl8gnkx2jxawbzm4x-cmdargs-0.10.22' '/nix/store/ii6281dn3krmvfialh4pfi5wyjzl547v-cryptohash-sha1-0.11.101.0' '/nix/store/mr4q23rxjinz4x78va0n598qmmh9wnbz-data-default-0.7.1.1' '/nix/store/0pkmk0y2mm2ggzs51zl7qf3hvkmpjap7-data-default-class-0.1.2.0' '/nix/store/b27x34m0jpn6hbr6dhf5718bz6jxv3jf-data-default-instances-containers-0.0.1' '/nix/store/8450ilcn2d7wqgvp722gn72wbdmpcbrl-data-default-instances-dlist-0.0.1' '/nix/store/csgzak4jzsiv1s2nwdrnrxryhpsl4wpv-data-default-instances-old-locale-0.0.1' '/nix/store/b2a1d3brdcbb3rv68n93ar5yp28bx47l-old-locale-1.0.0.7' '/nix/store/hjzz7980wq1i4abi62dcnb8nx1vk4qaz-extra-1.7.14' '/nix/store/slr5ysbgwnqqhbajanis7ch0pl1pmyr3-clock-0.8.4' '/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7' '/nix/store/g7g0yw36k73qgf3bnrbx3f22sl6p9j60-ghcide-2.4.0.0' '/nix/store/r6sj42f32bl74pav3s4hv0khbdfj6hlj-case-insensitive-1.2.1.0' '/nix/store/9lm69c1p5a8i5wflpq864gamnf0qczgi-co-log-core-0.3.2.0' '/nix/store/yawmswvgpak78f1qwi54179aqpmm8f7c-dependent-map-0.4.0.0' '/nix/store/w89jgplarj1cp88vifnaijv46lq3001a-constraints-extras-0.4.0.0' '/nix/store/xkli6gzpz7gzwl7zzj8dzal6aicq13c5-constraints-0.13.4' '/nix/store/gzb83fgccq1h7l4dabvsj2xsizp79lkk-type-equality-1' '/nix/store/xwqc6353kardbqxvznhs6zknj13m1jh5-dependent-sum-0.7.2.0' '/nix/store/pighsq4aq1p79zfdnirbnrpixhkw4hv0-some-1.0.4.1' '/nix/store/9n3005za28nrxcfpipy8w8xrsy5389k4-Diff-0.4.1' '/nix/store/80xpd94j3vpb76vvh20nkb74nf2zl0n4-enummapset-0.7.1.0' '/nix/store/x6xyq9a23l1z0csdzblr65naxfbbxxw9-fingertree-0.1.5.0' '/nix/store/j88rkw2crxlql5nz86f4pisgd0j1pj1f-focus-1.0.3.1' '/nix/store/c9zrd47i8fx51zvvjj09kxjbflgx1j1k-ghc-check-0.5.0.8' '/nix/store/j3f5db6a5v0gv21cfjvs57x9gldi8jsf-ghc-paths-0.1.0.12' '/nix/store/j3f5db6a5v0gv21cfjvs57x9gldi8jsf-ghc-paths-0.1.0.12' '/nix/store/z8r4qbz8lyq53kbrw4d63fcqrwdq584f-ghc-trace-events-0.1.2.7' '/nix/store/v7il9nvjvv27ch4hwl1n0idiv8073gi1-Glob-0.10.2' '/nix/store/dbpw2b1088rv6ar1hxnn1kf7nmc9a2pp-haddock-library-1.11.0' '/nix/store/zj3xhqvydcq86lx80pvk4qlzi1hsjxlw-hie-bios-0.12.0' '/nix/store/wj1znbq83qywqjf3mbq2yb3apj6qm15g-conduit-1.3.5' '/nix/store/hx2j0xq48h6yfwvr3j038ik1hrrzj15j-mono-traversable-1.0.15.3' '/nix/store/xjklfn8602900nh68705cpqcy5d46q2j-split-0.2.3.5' '/nix/store/7c2gh0fbv9msmmvykpazvfbabps38nq4-vector-algorithms-0.9.0.1' '/nix/store/pz7vyy2k1j5d3pbb31vwbzmpg8x8h829-bitvec-1.1.5.0' '/nix/store/pmh0f4x9w6q9wdvglfzqrz9l741yrfd9-resourcet-1.2.6' '/nix/store/plzm5y6c2d8fr0l4h9shxhi8xfk8hfcg-unliftio-core-0.2.1.0' '/nix/store/plzm5y6c2d8fr0l4h9shxhi8xfk8hfcg-unliftio-core-0.2.1.0' '/nix/store/3fg79i2a7jx2wbp789y56vanabgvgbxv-conduit-extra-1.3.6' '/nix/store/qy6ilg6hfsgyd26wncdg49z08xhv2ji4-streaming-commons-0.2.2.6' '/nix/store/kfr5kbvwh3sk92s542n0fky1lkwny88r-typed-process-0.2.11.1' '/nix/store/q843c1bfvk3mpxnpjz6phqhcw57zs0pf-file-embed-0.0.15.0' '/nix/store/6fivx33i6qi83ypifcpcdqqybczp6sf3-prettyprinter-1.7.1' '/nix/store/zlfad0sanfkivdgvlgciffdl5481vjf3-temporary-1.3' '/nix/store/j30nwm5qy13r2gmpspqcvhzqqgwqmssq-unix-compat-0.7' '/nix/store/jj2xgcgkiph0nj9gly3fm1b4nmsi5qnf-yaml-0.11.11.2' '/nix/store/vkm50z20lhyb24j59sprrsrsnql1hg9x-libyaml-0.1.2' '/nix/store/igsvrgjvhdrn8nd030q03p9bx14vrp0g-optparse-applicative-0.17.1.0' '/nix/store/v3jk3dk2w6nc7lmbngw7h8zsk7skkcll-ansi-wl-pprint-0.6.9' '/nix/store/ljsxyaz4dw1xl9jli25baj835xdgfjzz-ansi-terminal-0.11.5' '/nix/store/hn5xpnk97dszbs6qhbdji4k58afpaj6z-ansi-terminal-types-0.11.5' '/nix/store/4b501j0jnc2a14fldxzpyv905k5x6i4d-colour-2.3.6' '/nix/store/4b501j0jnc2a14fldxzpyv905k5x6i4d-colour-2.3.6' '/nix/store/avknz4anhsgsm38pfv0fn3fdixl2jwxb-hie-compat-0.3.1.1' '/nix/store/05bk7rs6gp4yk2g1zy4f4pa32nvv6a7h-hiedb-0.4.3.0' '/nix/store/5wnj33x2mnpn7yf886zfh1j8wsz99dsn-algebraic-graphs-0.7' '/nix/store/qnqk4kxfpm0x1k8zlr478c3z4ansx2vk-lucid-2.11.20230408' '/nix/store/5wi5mzhn15hwv1z8k2jh7rz92zcfd83q-blaze-builder-0.4.2.3' '/nix/store/2dn0bjs2k8kfdhxf57jls60s95l9g507-mmorph-1.2.0' '/nix/store/xajjsdl4qcyiijw8aqjx6gzrl2hi3rgd-sqlite-simple-0.4.18.2' '/nix/store/si86asivjsz251v8i9ixga4nrrpnaj08-blaze-textual-0.2.3.1' '/nix/store/aqyn73dv7pnfbvs9adwg390zwvvzdphb-direct-sqlite-2.3.28' '/nix/store/r3p0lkl913xkfiza55zv20ylcqh9yq0g-Only-0.1' '/nix/store/55c3x3zzfjcx6cyi9wprq2slccf3mi1a-terminal-size-0.3.4' '/nix/store/x6hkpaik85d0z698nizcb3q69gahfasw-hls-graph-2.4.0.0' '/nix/store/5387pw8cr80v6bb3rsdfpwrcqawjyb4k-js-dgtable-0.5.2' '/nix/store/h394sdzjycakbshcqk1mqn6n8zdnji16-js-flot-0.8.3' '/nix/store/anv27lv15l2vaxmirv3k8dz88mpsv032-js-jquery-3.3.1' '/nix/store/5r9qyb6js7mfp86c2gjahib62m1rd5v7-list-t-1.0.5.7' '/nix/store/l5zw8x89g7d5irpww5nixwxcx3k5wfk9-foldl-1.4.15' '/nix/store/cc2jjml2ggz9m5pzfa5mp2nd6p8r7mq5-profunctors-5.6.2' '/nix/store/4fvj8shrjywg9nckijn2yv8bjmylbdgv-logict-0.8.0.0' '/nix/store/0dwbqkrl9dhsgfy8hrkljp29h4lq53cs-monad-control-1.0.3.1' '/nix/store/mm6kchqx44isvcbcwxy8mlcjczx247ph-transformers-base-0.4.6' '/nix/store/mm6kchqx44isvcbcwxy8mlcjczx247ph-transformers-base-0.4.6' '/nix/store/jil3ivsgnca24sv9qrbwbgjaaq190n7i-stm-containers-1.2.0.2' '/nix/store/ymkqj944gxn8y3fjzsi4jn8kmikj1l8g-deferred-folds-0.9.18.5' '/nix/store/91a2vwkmkx4iadr6cg6b82nwz6ds5qm3-stm-hamt-1.2.0.13' '/nix/store/acv4asb9mwnljdjlcxx235bjr1ijpxza-primitive-extras-0.10.1.8' '/nix/store/5crsi5m4x19z0m9jz5rq79w57ylzdibi-cereal-0.5.8.3' '/nix/store/gkqphk59d8r1ial6pfd884i3rvd0ck2x-primitive-unlifted-0.1.3.1' '/nix/store/w8dp429k7ayc0q1yl0ail9gfz2vzxhl3-unliftio-0.2.25.0' '/nix/store/hi5h1kdvmr8szvh42s3yzrispil1fvfz-hls-plugin-api-2.4.0.0' '/nix/store/9x5g54lm5k6sqacd5nflvl3nfdhk01hq-hw-fingertree-0.1.2.1' '/nix/store/6bf0n28clfn7fxsxih7asy7zzmsp2xz7-hw-prim-0.6.3.2' '/nix/store/swg3qgzdp1g4cd35dkhlian7bmjvlmci-mmap-0.5.9' '/nix/store/axw2yr25yhk3izkf294vndxwpp4ikn31-lens-5.2.3' '/nix/store/hssp2kfsgszf9y7dh8x4b7m9g0dg603l-call-stack-0.4.0' '/nix/store/nbv33ql2pjg8kx0hh8q61af12dw1ri2k-free-5.1.10' '/nix/store/pf4x3nxag3my1l52l17yi4a1dy7absh6-kan-extensions-5.2.5' '/nix/store/vnliphvkwvwfiw4p87hlxgsqf9606ybh-adjunctions-4.4.2' '/nix/store/pqsml9f6ramzps6qf18yf8jk1c1dhf8z-semigroups-0.20' '/nix/store/s2vch2xakvwa0s3n6c26xm66fn79wnmw-void-0.7.3' '/nix/store/c7k74632i7pabs5v0d91adgdhq0348p0-invariant-0.6.2' '/nix/store/i03gmd6akiwkacigyrvd2fvqh296750h-parallel-3.2.2.0' '/nix/store/yiszfq9x27hdd754jwvhrp9l43kzl8x0-reflection-2.1.7' '/nix/store/vnb5p49mrrxkksa5sf026pphlb88ynby-lens-aeson-1.2.3' '/nix/store/xmjaxyfx4vsmmi6ywbvr3nwlwvgwj1j5-lsp-2.2.0.0' '/nix/store/6alyjxj2ip9nn0v8q7iqkr7rb2xancxh-lsp-types-2.0.2.0' '/nix/store/35nsc3pc32cpy7d3d6yddjz439zn93cb-mod-0.2.0.1' '/nix/store/a257knyxp3sp1821z4l1bzj4larz96rk-semirings-0.6' '/nix/store/riasgd4zp1jzxh32kdpj8ra2najj4ajm-row-types-1.0.1.2' '/nix/store/izbd99ngyylcdpdjwjj4n1dx7vbb3isc-generic-lens-2.2.2.0' '/nix/store/423cy4k7rc6lpm8rpfmc3pyjd3h9kwsg-generic-lens-core-2.2.1.0' '/nix/store/4s03vb0mbiwfvkw25qzkdzp07z429k65-indexed-profunctors-0.1.1.1' '/nix/store/4c0bzqyv7bnfkqvfm8gzm6jlhc4dgkb9-safe-0.3.19' '/nix/store/jsr1qp52bfwg59m3kjqmbi2g36dp35yl-regex-1.1.0.2' '/nix/store/w4f8ndv4q9j05cyaq4l80sh30m7r3arx-regex-pcre-builtin-0.95.2.3.8.44' '/nix/store/0ma7iim6xwjhp6nhxis9ld6x895w3y15-regex-tdfa-1.3.2.2' '/nix/store/bqw1n96ssr6pzbqgry9g2qr85q036mfb-time-locale-compat-0.1.1.5' '/nix/store/n8qmifi1ycm22r16plg7jp8jjdcy002h-utf8-string-1.0.2' '/nix/store/sxzj365ihcsv5p60ilw6ydqfxbs189w2-sorted-list-0.2.1.2' '/nix/store/j84nyh3662fx1syv2rv0wi5jzdjvn9r2-text-rope-0.2' '/nix/store/7qjr2zrfvknwc1j0ln5ihdjdj7jf31yh-uuid-1.3.15' '/nix/store/5lfp0wdnlp8ddpnlwdzgphjccgqd196n-cryptohash-md5-0.11.101.0' '/nix/store/cg2mj2nvz4fd7v61iqnwb9yci19z089j-entropy-0.4.1.10' '/nix/store/pzj4qzlkfxnw0lgdzadiknix5r4d2y3k-network-info-0.2.1' '/nix/store/gh4dfx63ap7wkz2824rv8ji5yf0li5b2-megaparsec-9.3.1' '/nix/store/r7zk7s3k1dygmr55qf0a3lnacqd9f2fh-parser-combinators-1.3.0' '/nix/store/q72ihc2r5lhiix118qgwl663pazmklfb-opentelemetry-0.8.0' '/nix/store/rz2czkn9k3ka0saghxkc95vvwwafd4y8-implicit-hie-0.1.2.7' '/nix/store/n5622ffrr3aizqrwh0v381ymr9sj68d6-filepattern-0.1.3' '/nix/store/n5622ffrr3aizqrwh0v381ymr9sj68d6-filepattern-0.1.3' '/nix/store/nl04p7zz6di5fzkwb4riv51mz3zq9j7z-implicit-hie-cradle-0.5.0.1' '/nix/store/q1b169rhhf19zl225x50nxianizp6may-prettyprinter-ansi-terminal-1.1.3' '/nix/store/qimip75s76z0kbw26is83lgwh45r0kh4-syb-0.7.2.4' '/nix/store/q41wd8cdsk6mi1ja641hrwr7l3drrnrp-gitrev-1.3.1' '/nix/store/ss8cbk6z6pds4j39mqc74n8q9nq8gxks-githash-0.1.7.0' '/nix/store/hjdsh05yp0w62afp9wi6lrg63r2kcr36-hls-alternate-number-format-plugin-2.4.0.0' '/nix/store/0ffjd6na9hipci4lz0za517g9d17xdag-hls-cabal-fmt-plugin-2.4.0.0' '/nix/store/3p4jgdw9wyfmds2lb72xwrv4mgsqk2zh-process-extras-0.7.4' '/nix/store/ag5livmiqmx8gnv4hz674ln267j9axs1-generic-deriving-1.14.5' '/nix/store/fc1wybc6175ciyblmyclpypd1lk6l0w8-ListLike-4.7.8.2' '/nix/store/8lqcfhqa8kqki0wln0xhkqpqgzjhsld7-fmlist-0.9.4' '/nix/store/n4psjsrpsqds9lb0b9h2ksh49qxg07ci-hls-cabal-plugin-2.4.0.0' '/nix/store/y9sakvxqg2gkhasmhy63170pc37glac8-hls-call-hierarchy-plugin-2.4.0.0' '/nix/store/rpfmsj346lh8qhkkqd3mx94c2i3cqg0v-hls-change-type-signature-plugin-2.4.0.0' '/nix/store/s7yq7gpc94jl1axhd3l2qnwh8qbhqq1d-hls-class-plugin-2.4.0.0' '/nix/store/5z2vdrb1krm5pi9iq8rn0p1i9yxlyca2-ghc-exactprint-1.6.1.3' '/nix/store/fkrpljb7fx9fam1s824g078psnkbzc2a-fail-4.9.0.0' '/nix/store/ls0pdri8vsiy33l6b1kqybx3rn84kjxh-ordered-containers-0.2.3' '/nix/store/lpmljnb20v50irs0h3s2cgi0hx4cq10l-hls-code-range-plugin-2.4.0.0' '/nix/store/a0ng8fir44xh8vkqwjpay7dg9qrm8cv3-hls-eval-plugin-2.4.0.0' '/nix/store/vjyp0l71prh9ps4fl26xcd7n3y5nc3db-pretty-simple-4.1.2.0' '/nix/store/vimyr6y7hyikm80hsavcjxndg9lbhggk-hls-explicit-fixity-plugin-2.4.0.0' '/nix/store/wp4lz8xgxipja00gbhaa8apsllj2y14r-hls-explicit-imports-plugin-2.4.0.0' '/nix/store/i4fhwrpwv8x32d15airkvmxqicp9k76d-hls-explicit-record-fields-plugin-2.4.0.0' '/nix/store/ggkvif30253mm9xmk5aw7cnlc2z8dry0-hls-floskell-plugin-2.4.0.0' '/nix/store/zxah2rghfz3r170ydsqc7zpmn7fixi29-floskell-0.10.8' '/nix/store/pjh3w8gn4z6x4p3af04pmxli2sgzlbf7-haskell-src-exts-1.23.1' '/nix/store/6kbij6kp7sjwnim1vg86sfwdcs89lfb0-monad-dijkstra-0.1.1.4' '/nix/store/c5hq2djq5i4vxv88vbka6ydv19kd3myk-psqueues-0.2.7.3' '/nix/store/z98vg0rp4racfkndj08q0dssjnid2500-hls-fourmolu-plugin-2.4.0.0' '/nix/store/7j6j38072fvgs2g4gqc4jlv94ps0v0k8-fourmolu-0.14.0.0' '/nix/store/zmmwl4zvc56rv7cknyx3k797s162yxci-ghc-lib-parser-9.6.3.20231014' '/nix/store/2zry1vkw72x0456skpfjpq3f9wplq4m8-MemoTrie-0.6.11' '/nix/store/miq93yykap0l22i84slw0ynir7mfppqn-newtype-generics-0.6.2' '/nix/store/v5baacznr3qbqhbcpgll22m8939xjf6b-th-env-0.1.1' '/nix/store/2kriacn5l8qyjhvp4gkkgh0ljvimhc8g-hls-gadt-plugin-2.4.0.0' '/nix/store/jxs05kijqz0kvzmsprd00ibbdpghxph5-hls-refactor-plugin-2.4.0.0' '/nix/store/4a4449flvnpd611wsk8zczqf9g7iyjhf-regex-applicative-0.3.4' '/nix/store/c0pn9anypiqkffx7lf31da73w6dvh940-filtrable-0.1.6.0' '/nix/store/cxl5ys0w3733mpnim74lja54lms9309q-retrie-1.2.2' '/nix/store/f659fnby2g589bad0qhyp8dlwp98vfvr-random-shuffle-0.0.4' '/nix/store/27zcxr5zwcfqprvqps41gkza9crj37mc-MonadRandom-0.6' '/nix/store/6rp0kg71945c2mbji20didb4vdwgh1by-hls-hlint-plugin-2.4.0.0' '/nix/store/mlq6cwsc8wfkb3igcsyy1m5bviv7wl3i-apply-refact-0.13.0.0' '/nix/store/hc24gw969qms9g5jccghspjp573b10rf-filemanip-0.3.6.3' '/nix/store/dx0h97azfdh98zhx5vmj7r7qf6jv7wny-refact-0.3.0.2' '/nix/store/5nrgkyzi12f01zpsph88sc077xa7cnr5-uniplate-1.6.13' '/nix/store/5nrgkyzi12f01zpsph88sc077xa7cnr5-uniplate-1.6.13' '/nix/store/m44sijd00cx24a1xhlqkzvfxq6qhhzn3-ghc-lib-parser-ex-9.6.0.2' '/nix/store/r8yzijs1qmw4wrixqcvvjfjcywr7isn9-hlint-3.6.1' '/nix/store/5bgmxd62a7sr8bcp0b677ph6gdxaq1d4-cpphs-1.20.9.1' '/nix/store/8chdq8g4ri2phjdjk16b5bvph627gz03-polyparse-1.13' '/nix/store/8chdq8g4ri2phjdjk16b5bvph627gz03-polyparse-1.13' '/nix/store/1609kk9lp5j60jgdpyqyb5i0wz4frkj4-deriving-aeson-0.2.9' '/nix/store/i378r651pnbhdssh9wncc78wzc02pfkc-hscolour-1.24.4' '/nix/store/jdlgq36dafh4wp0x40mkqaqq7flqkkpd-hls-module-name-plugin-2.4.0.0' '/nix/store/fff2qg5p81ylhyrllb0h83hlq4qa1zbh-hls-ormolu-plugin-2.4.0.0' '/nix/store/m7qlcxxj790afy2nabsa391yfvjisj5d-ormolu-0.7.2.0' '/nix/store/r5996735hj8r46dnpykrsjgk24ls51vb-ormolu-0.7.2.0-bin' '/nix/store/g6g1h8i6w42l6c4711dccf980mwnx7s0-hls-overloaded-record-dot-plugin-2.4.0.0' '/nix/store/w6lab76k4k8h8hn15fw7gs0cglrckllc-hls-pragmas-plugin-2.4.0.0' '/nix/store/6lhvnila1dc9w92q65nc9ffj6glxwvfc-fuzzy-0.1.0.1' '/nix/store/8vsa58qr1m5n9fd2x7ljp83yi8kf9vzh-monoid-subclasses-1.2.4' '/nix/store/ysg1zda35zzri24rqidsydrxqsfy9040-commutative-semigroups-0.1.0.1' '/nix/store/xizlqldjmg3kvqbqk6s6jz448z8cl5s2-primes-0.2.1.0' '/nix/store/qdxwd7wdvwvn66j8xxvg1h1md2q5hcsg-hls-qualify-imported-names-plugin-2.4.0.0' '/nix/store/cgfy4hjcpv7502m4nkxasv5hlivmhdhf-hls-rename-plugin-2.4.0.0' '/nix/store/bhrfxijxkz4gdbhhhxff5h4x9512axna-hls-retrie-plugin-2.4.0.0' '/nix/store/5q10qi72dk0s9lyw9f5dbg9q068kgbr1-hls-splice-plugin-2.4.0.0' '/nix/store/i67lh0caamh2k8pszb4g2hx1g7dkzqbx-hls-stylish-haskell-plugin-2.4.0.0' '/nix/store/wywgd3wp46ih363zmyamf9k5bcj0rr20-stylish-haskell-0.14.5.0' '/nix/store/js2lxgbi7c7vdbashcsk207ddh9famk7-HsYAML-0.2.1.2' '/nix/store/827r74r4yrbi61a8kk9cdw9pp0qjf8cw-HsYAML-aeson-0.2.0.1' '/nix/store/827r74r4yrbi61a8kk9cdw9pp0qjf8cw-HsYAML-aeson-0.2.0.1' '/nix/store/7qi79xym80gz0jrppf9h97vfcjrix9z3-optparse-simple-0.1.1.4' '/nix/store/7qi79xym80gz0jrppf9h97vfcjrix9z3-optparse-simple-0.1.1.4' '/nix/store/znqwpxy9jlxcgi2ms2hga0ch87bbbr9g-patchelf-0.15.0' '/nix/store/6g3mnziija245czxdqvs4k4sc6lad0sw-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/wzdsbnv2ba3nj91aql8jjdddfmkkdh7h-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh' '/nix/store/wmknncrif06fqxa16hpdldhixk95nds0-strip.sh' '/nix/store/zlzz2z48s7ry0hkl55xiqp5a73b4mzrg-gcc-wrapper-12.3.0' '/nix/store/h8d2j0prdf7pnpgyrgkxrrbfwnmxbq6y-binutils-wrapper-2.40' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4' '/nix/store/y27p4hb1b19adypnygwl01ns4pxrhy5j-libffi-3.4.4' '/nix/store/bsb4z6yw6v3kz7vmf1m4gh4flf9kj1ck-gmp-with-cxx-6.3.0' '/nix/store/qzrp68dizk4fsiab5cfscv1ja00h5frn-ncurses-6.4' )
declare -a pkgsHostTarget=()
declare -a pkgsTargetTarget=()
pname='haskell-codespace'
export pname
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
postPatch=''
export postPatch
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases='compileBuildDriverPhase updateAutotoolsGnuConfigScriptsPhase'
export preConfigurePhases
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preInstallPhases='haddockPhase'
export preInstallPhases
prePatch=''
export prePatch
prePhases='setupCompilerEnvironmentPhase'
export prePhases
prefix='/home/sspeaks/wsl_projects/haskell_codespace/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
setOutputFlags=''
export setOutputFlags
setupCompilerEnvironmentPhase='NIX_BUILD_CORES=$(( NIX_BUILD_CORES < 16 ? NIX_BUILD_CORES : 16 ))
runHook preSetupCompilerEnvironment

echo "Build with /nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7."


builddir="$(mktemp -d)"
setupPackageConfDir="$builddir/setup-package.conf.d"
mkdir -p $setupPackageConfDir
packageConfDir="$builddir/package.conf.d"
mkdir -p $packageConfDir

setupCompileFlags="-package-db=$setupPackageConfDir -j$NIX_BUILD_CORES +RTS -A64M -RTS -threaded -rtsopts"
configureFlags="--verbose --prefix=$out --libdir=\$prefix/lib/\$compiler --libsubdir=\$abi/\$libname  --docdir=$doc/share/doc/haskell-codespace-0.1.0.0 --with-gcc=$CC --package-db=$packageConfDir   --ghc-options=-j$NIX_BUILD_CORES +RTS -A64M -RTS  --disable-split-objs --enable-library-profiling --profiling-detail=exported-functions --disable-profiling --enable-shared --disable-coverage --enable-static --disable-executable-dynamic --enable-tests --disable-benchmarks --enable-library-vanilla --disable-library-for-ghci --ghc-option=-split-sections $configureFlags"
for p in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}"; do
  # If this dependency has a package database, then copy the contents of it,
# unless it is one of our GHCs. These can appear in our dependencies when
# we are doing native builds, and they have package databases in them, but
# we do not want to copy them over.
#
# We don'\''t need to, since those packages will be provided by the GHC when
# we compile with it, and doing so can result in having multiple copies of
# e.g. Cabal in the database with the same name and version, which is
# ambiguous.
if [ -d "$p/lib/ghc-9.4.7/package.conf.d" ] && [ "$p" != "/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7" ] && [ "$p" != "/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7" ]; then
  cp -f "$p/lib/ghc-9.4.7/package.conf.d/"*.conf $setupPackageConfDir/
  continue
fi

done
ghc-pkg --package-db="$setupPackageConfDir" recache
for p in "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}"; do
  # If this dependency has a package database, then copy the contents of it,
# unless it is one of our GHCs. These can appear in our dependencies when
# we are doing native builds, and they have package databases in them, but
# we do not want to copy them over.
#
# We don'\''t need to, since those packages will be provided by the GHC when
# we compile with it, and doing so can result in having multiple copies of
# e.g. Cabal in the database with the same name and version, which is
# ambiguous.
if [ -d "$p/lib/ghc-9.4.7/package.conf.d" ] && [ "$p" != "/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7" ] && [ "$p" != "/nix/store/z1hnp331svvqhkq9kc9yp5xkp0yqvs3q-ghc-9.4.7" ]; then
  cp -f "$p/lib/ghc-9.4.7/package.conf.d/"*.conf $packageConfDir/
  continue
fi

  if [ -d "$p/include" ]; then
    configureFlags+=" --extra-include-dirs=$p/include"
  fi
  if [ -d "$p/lib" ]; then
    configureFlags+=" --extra-lib-dirs=$p/lib"
  fi
if [[ -d "$p/Library/Frameworks" ]]; then
  configureFlags+=" --extra-framework-dirs=$p/Library/Frameworks"
fi
done
ghc-pkg --package-db="$packageConfDir" recache

runHook postSetupCompilerEnvironment
'
export setupCompilerEnvironmentPhase
shell='/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin/bash'
export shell
src='/nix/store/byp23j95x3n79iwicq78v3x2yv9hxwmx-haskell_codespace'
export src
stdenv='/nix/store/bbxdw4rgwwl3gnajri82yidr1nlsfskf-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
version='0.1.0.0'
export version
_accumFlagsArray ()
{
 
    local name;
    if [ -n "$__structuredAttrs" ]; then
        for name in "$@";
        do
            local -n nameref="$name";
            flagsArray+=(${nameref+"${nameref[@]}"});
        done;
    else
        for name in "$@";
        do
            local -n nameref="$name";
            case "$name" in 
                *Array)
                    flagsArray+=(${nameref+"${nameref[@]}"})
                ;;
                *)
                    flagsArray+=(${nameref-})
                ;;
            esac;
        done;
    fi
}
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    for varName in $(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }');
    do
        if (( "${NIX_DEBUG:-0}" >= 1 )); then
            printf "@%s@ -> %q\n" "${varName}" "${!varName}" 1>&2;
        fi;
        args+=("--subst-var" "$varName");
    done
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                xz -d < "$fn" | tar xf - --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget=check;
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget=test;
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray+=("${checkFlags[@]:-VERBOSE=y}");
        else
            flagsArray+=(${checkFlags:-VERBOSE=y});
        fi;
        _accumFlagsArray checkFlagsArray;
        flagsArray+=(${checkTarget});
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        _accumFlagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    _accumFlagsArray distFlags distFlagsArray;
    flagsArray+=(${distTarget:-dist});
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars" || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
            continue;
        fi;
        if [[ -n $NIX_LOG_FD ]]; then
            echo "@nix { \"action\": \"setPhase\", \"phase\": \"$curPhase\" }" >&"$NIX_LOG_FD";
        fi;
        showPhaseHeader "$curPhase";
        dumpVars;
        local startTime=$(date +"%s");
        eval "${!curPhase:-$curPhase}";
        local endTime=$(date +"%s");
        showPhaseFooter "$curPhase" "$startTime" "$endTime";
        if [ "$curPhase" = unpackPhase ]; then
            [ -n "${sourceRoot:-}" ] && chmod +x "${sourceRoot}";
            cd "${sourceRoot:-.}";
        fi;
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.40: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.40: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
            _accumFlagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray;
            flagsArray+=(${installCheckTarget:-installcheck});
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
    _accumFlagsArray makeFlags makeFlagsArray installFlags installFlagsArray;
    if [ -n "$__structuredAttrs" ]; then
        flagsArray+=("${installTargets[@]:-install}");
    else
        flagsArray+=(${installTargets:-install});
    fi;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    if [ -n "$__structuredAttrs" ]; then
        patchesArray=(${patches:+"${patches[@]}"});
    else
        patchesArray=(${patches:-});
    fi;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray=("${patchFlags[@]:--p1}");
        else
            flagsArray=(${patchFlags:--p1});
        fi;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f";
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" command -v "env" || true)";
                args="-S $(PATH="${!pathName}" command -v "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" command -v "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" command -v "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    case "$phase" in 
        unpackPhase)
            echo "unpacking sources"
        ;;
        patchPhase)
            echo "patching sources"
        ;;
        configurePhase)
            echo "configuring"
        ;;
        buildPhase)
            echo "building"
        ;;
        checkPhase)
            echo "running tests"
        ;;
        installPhase)
            echo "installing"
        ;;
        fixupPhase)
            echo "post-installation fixup"
        ;;
        installCheckPhase)
            echo "running install tests"
        ;;
        *)
            echo "$phase"
        ;;
    esac
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -print0 | xargs -r -0 -n1 -- realpath -z | sort -u -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        case "$1" in 
            --replace)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        echo "substituteStream(): WARNING: pattern '$pattern' doesn't match anything in $description" 1>&2;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream(): ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream(): ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream(): ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    if [ -n "$__structuredAttrs" ]; then
        srcsArray=("${srcs[@]}");
    else
        srcsArray=($srcs);
    fi;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/azkk9647ivcaa29fpb8viwj879q7yjw4-gnu-config-2023-07-31/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
